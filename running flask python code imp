from flask import Flask, render_template, request
from flask import jsonify
import json

import h2o
h2o.init(min_mem_size=8)
from h2o.estimators.random_forest import H2ORandomForestEstimator
from h2o.estimators.gbm import H2OGradientBoostingEstimator
from h2o.estimators import H2OXGBoostEstimator
from h2o.estimators.stackedensemble import H2OStackedEnsembleEstimator
from h2o.grid.grid_search import H2OGridSearch
from h2o.model.metrics_base import H2OAutoEncoderModelMetrics
from h2o.model.metrics_base import MetricsBase
from h2o.model.metrics_base import H2OBinomialModelMetrics   
from h2o.model.metrics_base import H2OClusteringModelMetrics
from h2o.model.metrics_base import H2ODimReductionModelMetrics 
from h2o.model.metrics_base import H2OMultinomialModelMetrics
import pandas as pd
import h2o
from h2o.job import H2OJob
from h2o.frame import H2OFrame
from h2o.exceptions import H2OValueError
from h2o.estimators.estimator_base import H2OEstimator
from h2o.two_dim_table import H2OTwoDimTable
from h2o.display import H2ODisplay
from h2o.grid.metrics import *  # NOQA
from h2o.utils.backward_compatibility import backwards_compatible
from h2o.utils.shared_utils import deprecated, quoted
from h2o.utils.compatibility import *  # NOQA
from h2o.utils.typechecks import assert_is_type, is_type
h2o.no_progress()
    
app = Flask(__name__)
 
#Here the method is not mensioned.That means we r not using any inputs given by user here.
#@app.route('/')
#def student():
#   return render_template('student.html')

 

##Here the method is mensioned.That means we r using any inputs given by user here.
@app.route('/result', methods = ['POST'])
def JsonHandler():
    
    #get the built model from training set
   # saved_model = h2o.load_model("Grid_XGBoost_py_4_sid_b12f_model_python_1547186079651_1_model_1")

 
    
    #Get Json object
    content = request.get_json()
    #convert json object into string format(python list) if u want to loop and get values seperately
    #json_string = json.dumps(content)
    df = pd.DataFrame.from_dict(content, orient='columns')
    print(df)
    #print(json_string)
    #try:
    #    data = json.loads(json_string) 
    #    for element in data['customer']:
    #        print (element['Attendance'])  
        
    #except (ValueError, KeyError, TypeError):
    #    print("JSON format error")
    
    #data = json.loads(jsonify(content))

    #latlng = data['results'][0]['locations'][0]['latLng']
    #latitude = latlng['lat']
    #longitude = latlng['lng']

    #print(latitude, longitude) 
    return jsonify(content)

#def defaultPrediction():    


if __name__ == '__main__':
   app.run(debug = True)
   
   





